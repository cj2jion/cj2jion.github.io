---
layout: post
title:  关于SDN的学习
date:   2016-10-21 
category: "学习"
---


<h2 id="section1">一、我最初对SDN的理解</h2>

<p>当我当听到SDN网络定义软件，我第一反应是NFV，网络虚拟化。后来又听说SDN要实现集中管理的要求，我想到的是管理与控制分离，嗯！很奇怪，我想的并不是控制与转发分离。因为我以为要集中控制整个网络中的设备，这个工作量已经太庞大了，所以我不敢想还要把所有的控制与策略处理等所有的功能全部放在controller上，这样对controller的性能要求，存储要求，运算要求等等太高，而且极易造成单点故障，所以，我以为的集中控制只是把管理设备这部分功能抽取出来集中在一起。事实上确实有认识像我这么想也是这么做的，比如，阿里巴巴推出了自己的SDN方案，在2013 GITC会议期间，他们自己也说他们的SDN不是大家一般所理解中的SDN，他们的SDN是通过软件控制脚本，让这些脚本向远程的交换机发送命令（不清楚是NetConf还是直接的命令行）来控制交换机，交换机上仍然运行了传统的二三层协议，控制跟转发并没有分离，分离的是管理和控制。不过大部分的人对SDN的分离的理解是控制与转发层面分离，极大简单化底层转发层面，控制层面进行协议运行，决策，用指令集来控制底层设备实现功能。</p>

<h2 id="section2">二、大部分人对SDN的理解</h2>
<p>SDN，即网络软件设计，只要网络硬件集中软件管理，可编程化，控制转发层面分开，则可认为这个网络是一个SDN网络。SDN并不是一个具体的协议和技术，而是一个思想，一个框架，例如OSI七层模型，有人认为SDN是应用层、控制层、转发层三层模型。</p>

<h2 id="section3">三、关于SDN可编程化和集中管理的理解（从为什么的方面的理解）</h2>
<p>想学习的人可以看看 <a href="http://www.openstack.cn/?p=4478">SDN软件定义网络白皮书：网络新常态</a>   由作者A.L 译自<a href=" http://www.opennetworking.org">ONF（开放网络基金会）</a> 关于SDN软件定义网络白皮书。虽然强烈推荐直接看英文的，因为译文有些地方，有些句子读起来还不是那么容易让人懂，但是想偷一下懒的人看一下译文也是极好的。里面有关于新网络架构的需求和现有网络技术缺陷的讲解。因为要学习SDN可编程和集中化的先进性，就应该了解就网络的缺陷。为什么旧网络不满足现在用户要求，为什么SDN可以满足？为了方便学习，我将部分译文摘抄过来了，如下：</p>


<h3 id="section3-1">3.1：对于新网络架构的需求</h3>
<p>移动设备与内容及服务器虚拟化技术的爆发，以及发展强势的云服务正驱动网络领域重新检视传统网络架构。许多常规网络为层阶试，设多层以太网交换机，以树图结构排列。此设计在客户服务器以计算为主导时是合理的，但其静态架构与当下企业数据中心、园区、运营商环境的动态计算与存储需求并不相符。对于新网络范式的需求正受以下关键计算趋势的驱动:</p>
<ol>
    <li>流量规律的改变：企业数据中心的通信规律已出现核心变化。相比大多通信发生于单一用户与单一服务器之间的用户服务器应用，当下的应用可接入不同数据库与服务器，于数据被返回至用户设备，形成传统通信之前，完成一系列的机器间通信。同时，用户可在随时随地于不同设备（包括其自有设备）间推送企业内容与应用时也在改变通信规律。此外，众多企业数据中心管理者于起用节能计算模型的设想将涉及私有云、公有云或二者的某种结合，于广域网形成更多通信。</li>
    <li>IT“消费化”：以手机、平板电脑、笔记本电脑等移动设备接入公司内网的用户正快速增长。IT部门需在接纳上述设备的同时，确保合规性，维护公司数据及知识产权。</li>
    <li>云服务的兴起：公有云与私有云服务正因各行企业的盛情推崇，经历前所未见的增长。企业业务部门希望获得必要的敏捷性以按需接入应用、架构及其他IT资源。此外，IT部门于云服务须在更安全、合规的环境执行，面对更严苛的审计的限定；以及其架构基本设定可随企业架构变更、部门整合、归并而实时变化的特性，使网络架构需应对更复杂的行业现状。</li>
    <li>大数据”意味着更多带宽：应对当下的“大数据”，即超级数据集，需要于千余台直接互连的服务器完成海量并行处理。超级数据集的兴起推动着数据中心于网络性能的持续需求，而超级数据中心的网络运维人员也必然面对一项不易完成的任务：在将现有网络扩展至空前量级的同时，保持全网互通。</li>
</ol>

<h3 id="section3-2">3.2：现有网络技术的缺陷</h3>
<p>传统网络的问题：1. 网络厂商杂，设备类型多，设备数量多，命令不一致，导致网络管理和部署非常麻烦。2. 传统的网络设备，工作方式一般都是固定好的，例如交换机根据MAC地址转换表，路由器根据路由表转发，按照业务需求进行网络设备的策略自定义，实际上是一个可编程的需求，但是传统网络设备是一个黑盒子，内部源码，产品功能对用户封印，话语权在网络厂商这边。所以宽带静态分配，流量可视化难。 </p>
<p>传统网络架构已不可能满足当下的市场需求。常年有减无增的预算迫使企业IT部门需靠设备层管理工具及人工流程，力求最大化网络产能。而运营商们也处类似境况：于移动化及带宽需求的爆发，使业务利润被递增的资金成本与有减无增的收入不断侵蚀。现有网络架构并非为当下的用户、企业及运营商需求设计。反之，网络设计者们往往受限于现有网络的缺陷，包括：</p>
<ol>
<li>因过于复杂导致停滞：网络技术发展至今，多由独立、分离的协议构成，以确保主机可于任意距离、速度、技术建立可靠连接。数十年间，为满足商业及技术需求，网络协议逐渐发展至以交付更高性能、可实现更广泛的连接及更严苛安的全性的网络设备及服务为主导。</li>
</ol>
<p>而协议常被单独定义，各自解决不同问题，且不涉及基本抓取。因此，当下的网络构成较为繁复，成为其主要缺陷之一。举例，添加或移动任何设备，需以设备层管理工具触及多台交换机、路由器、防火墙、网络认证协议入口等，且须更新ACLs，VLANs，网络服务质量及其他基于通信协议的机制。此外，网络技术、厂商替换设备型号、软件版本均需被考虑。鉴于其复杂度，且因IT部门多试图最小化服务中断的风险，当下的网络多为静态。</p>
<p>上述的静态网络性质与当下服务器环境的高能动态形成鲜明对比。服务器虚拟化已大幅提高需以网络连接的主机的数量，并重新定义于主机物理位置的设想。
虚拟化之前，应用常置于单一服务器，仅与指定客户端通信。现在，应用被分布于多台互换信息的虚拟机，其迁移可优化、调整服务期工作负载，使现有信息流的物理端可随时（快速）更新。虚拟机可于多方面挑战传统网络，从方案构建与名称空间，到分段的、以路由为基础的设计的基本概念。
</p>
<p>此外，当下的众多企业采用IP融合网络于音频、数据及视频流量。虽然现有网络可为不同应用提供差异化QoS层级，这些资源的管控仍以手动为主。IT部门须分别配置不同厂商的设备，基于每次会话与每个应用调整网络带宽及QoS参数。因其静态性质，网络无法自行动态适应流量变化与用户需求。</p>

<ol>
<li>歧出的策略：实施全网策略需IT部门配置上千台设备与机制。举例：起用新虚拟机可需数小时甚至几天，于全网络重新配置ACL。鉴于当下网络之繁复，广义的接入权限、安全、QoS及其他策略很难满足激增的移动用户，导致企业更易遇安全漏洞、违规及其他负面事件。</li>
<li>扩展能力：随之数据中心规模激增，于网络的要求也应之提升。但整体网络结构因新加入的需配置及管理的网络设备而变得繁复不堪。IT部门曾根据可预测的流量规律超额订购连接实现网络扩展，但当下，虚拟数据中心的动态流量已无规可循，更无法预测。</li>
</ol>

<p>对于可扩展性，Google、Yahoo！、Facebook等大型企业需面对更大挑战。这些服务提供商采用大规模并行处理算法及关联的数据集，横跨整个计算池。随着最终用户的应用范围加大（举例：检索整个万维网并将查询结果瞬间返回给用户），计算元素的数量爆发；计算节点间数据集的交换量至petabyte级。这些公司需要“超级可扩展”网络，以于数百万甚至千万台物理机获得高性能、低成本连接能力。此规模的扩展将不可能被手动配置。</p>
<p>为保持竞争力，运营商需交付价值更高、差异更明显的服务至用户。而多用户共享机制使运营商的任务更加复杂，因为网络将需服务于涉及不同应用的用户组，满足不同的性能需求。以引导客户流量提供定制化性能控制、按需交付等核心操作看似简明直接，其实难于现有网络部署，尤其于运营商规模。它们将需专业设备于网络边缘，承担相关资金与运营成本，及新服务入市的时间成本。</p>
<ol>
<li>厂商依赖性：运营商与企业力求部署新性能与服务以快速响应多变的业务与用户需求。但其响应能力常被供应商多为三到五年，甚至更长的设备产品周期阻碍。标准化的缺失、开放接口限制了网络运营商根据自身环境按需定制网络的能力。</li>
</ol>
<p>市场需求与网络性能间的失配已将该领域带至其发展的临界点。而软件定义网络（Software Defined Network, SDN）架构及其相关标准，将引领网络领域进入下一阶段。
软件定义网络（Software Defined Network, SDN）是新兴网络架构，其网络控制与转发分离、且可直接编译。之前被捆绑于独立网络设备的网络控制功能被移至可接入的计算设备，使底层架构可为应用及网络服务摘取。由此，网络将可被视为独立的逻辑或虚拟实体。
</p>
<p>网络智能被（合理的）整合于基于软件的SDN控制器，以维持网络全视性。于此，网络将可以独立的本地逻辑开关的形式现于应用及策略引擎。通过SDN，企业与运营商将收获厂商独立性，由某一逻辑点自主控制全网，因网络设备无需理解、处理协议标准，仅需接受自SDN控制器的指令，从而高度简化网络设备。</p>
<p>最重要的是，网络管理员将可以编程的方式配置简单的网络抽象，而非手动编译分散在数千台设备的万余行配置。此外，SDN控制器的集中智能可助IT部门实时改变网络行为，于数小时内部署新应用与网络服务，目前则所需几天或数周。通过将网络状况集中于SDN控制层，网络管理人将可以动态、自动化SDN项目完成网络资源的弹性配置、管理、维护及优化。而且他们将可自行编写相关程序，不必等待功能被嵌入厂商拥有产权的封闭软件环境。</p>
<p>抓取网抓取络之外，SDN架构还支持一系列API以便于实施路由（routing）、组播、安全、接入控制、带宽管理、流量规划、网络服务质量、处理器与存储优化、节能及全类型策略管理等通用网络服务，并将其于不同业务目标分别定制。举例，SDN架构可简化有线与无线连接通用的网络策略的制定与实施。</p>
<p>同理，SDN的智能协调与管控系统可帮助实现全网管理。于此，开放网络基金会正在研究开放API以推动多厂商管理，驱动按需资源分配、自主服务管控以将网络真正虚拟化，确保运服务的安全性。</p>
<p>因此，开放API被置于SDN控制器和应用层之间，商业应用将可运行于网络抓取，并由此利用网络服务与性能而不必受困于实施细节。SDN让网络从应用感知转向应用定制；让应用从网络感知转向网络性能感知。于此，计算、存储与网络资源将可被全面优化。</p>

<h2 id="section4">四、关于SDN控制与转发分离的理解（从效果方面的理解）</h2>
<p>有网友将SDN与pc放在一起学习，我觉得很有趣<a href=" http://www.sdnlab.com/4573.html "> SDN与PC </a>假如网络能像PC这样，满足简单通用硬件底层、软件定义功能和开源模式三要素，相信一定能获得更快的创新速度。</p>
<img src="http://photo.weibo.com/5575752449/wbphotos/large/mid/4033516885402841/pid/0065lhV7gw1f91g4b589cj30nk0diabu" alt="" title="SDN" />
<p>传统的网络系统架构如左上图所示，其中的网络设备专用的功能软件和操作系统，再加上定制化的硬件，完全是一个封闭的黑盒子。而SDN系统架构如右上图所示，网络的控制部分从封闭盒子中分离出来，控制部分的这种变化，使得网络更加类似今天的PC。整个网络的功能取决于软件实现的控制部分，这样用户（比如Google）就可以在一个逻辑点上控制整个网络，不受设备厂商（比如Cisco）的限制，从而简化网络的设计和运营。SDN的控制部分也分为控制层和应用层，前者称为SDN控制器，类似PC的操作系统，后者包括具体的应用程序。</p>
<p>在封闭盒子中依然保留的是通用硬件底层，也就是网络转发面。通用转发面使得网络设备尽可能的简单通用，不再需要理解、处理和实现大量的网络协议，只需要从SDN控制部分接收操作指令。从图中可以看出，OpenFlow是SDN控制部分与硬件底层的接口协议，实际上OpenFlow好比是SDN的x86指令集（Instruction-Set Architecture，ISA），定义了软件编程网络设备转发面的基本原语，采用flow的概念来识别基于预定义规则匹配的网络流量。SDN控制软件可以静态或动态编程这些规则，定义网络设备的功能，从而控制整个网络，部署新的网络应用和服务。</p>

<h2 id="section5">五、SDN与overflow</h2>
<p>SDN不等于OpenFlow，就如同互联网不等于IP协议，PSTN不等于7号信令，IMS不等于SIP，WEB体系不等于HTTP协议一样。OpenFlow仅仅是SDN中控制器控制转发面设备的协议而已，控制器本身的架构、网络拓扑算法、运行环境、编程工具，以及和上层应用的集成技术都是SDN的一部分，并且是架构上更为核心的部分。打个比方，存储程序控制是冯.诺依曼计算机体系的核心理念，至于你采用何种CPU指令集倒是其次，你可以采用古老的ENIAC、IBM system360指令集，也可以用现代的IBM Power、x86、MIPS、ARM指令集，每一种计算机系统都是冯.诺依曼体系架构的一个实例。
当然，对于SDN而言，不能仅仅只有抽象的架构，一定要有具体的实现实例，因此业界选择了OpenFlow协议作为指令集，并围绕其来建立一系列的操作系统、软件、编译器、外设框架和实现。</p>

<h2 id="section6">六、SDN与NFV</h2>
<h2 id="section7">七、学习步骤</h2>





















